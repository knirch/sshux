#!/bin/bash

if [[ $LC_SSHUX_DISABLE == 1 ]]; then
	exit 1
fi

# Exit 0; Caller should exit
# Exit 1; Caller should spawn shell

# Exit with 1 to indicate to calling shell that it should
# continue with its execution

# Inside of tmux, tell caller to start shell.
if [[ -n $TMUX ]]; then
	exit 1
fi

# Determine if local execution should be wrapped in tmux
if [[ -z $SSH_CLIENT && $SSHUX_USE_LOCAL != 1 ]]; then
	exit 1
fi

tmux_opt=(-L sshux-wrapped)

find_detached() {
	if [[ $LC_SSHUX_FORCE_NEW == 1 ]]; then
		return 1
	fi
	while read -r attached name; do
		(( attached > 0 )) && continue
		echo "$name"
		return 0
	done < <(tmux "${tmux_opt[@]}" list-session -F "#{session_attached} #{session_name}")
	return 1
}

config=$(mktemp -p "${TMPDIR:-/tmp}" sshux--tmux-conf.XXXXXX)
cat >"$config" <<-EOF
	# As close to a normal shell as possible
	set -g status off
	set-option -g exit-empty off
	set-option -g prefix None
	set-option -g history-limit 200000
	set-option -g default-terminal "screen-256color"
EOF
tmux "${tmux_opt[@]}" -f "$config" start-server
rm -f "$config"

if detached=$(find_detached); then
	tmux "${tmux_opt[@]}" attach-session -t "$detached"
else
	tmux "${tmux_opt[@]}" new-session -s "sshux-$$"
fi

# exit 0 to tell the caller that we're leaving a session, this could be used to
# remain in a normal shell after exit/detach, but there is no good way of
# passing messages from inside of tmux to this script. See below for a too
# involved way of sorting it.
exit 0
